// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model Link {
  id          String           @id @default(auto()) @map("_id") @db.ObjectId
  createdAt   DateTime         @default(now())
  name        String?
  originalURL String
  shortURL    String           @unique
  protected   Boolean          @default(false)
  clicks      Int              @default(0)
  user        User?            @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId      String? // Foreign key to User model
  traffic     Traffic[] // One-to-Many relation with Traffic
  modifiedAt  DateTime?        @default(now())
  archived    Boolean          @default(false)
  collections CollectionLink[] // Many-to-Many relation with Collection
}

model Collection {
  id        String           @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime         @default(now())
  name      String
  user      User?            @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String? // Foreign key to User model
  links     CollectionLink[] // Many-to-Many relation with Link
}

// Junction table for many-to-many relationship between Link and Collection
model CollectionLink {
  id           String     @id @default(auto()) @map("_id") @db.ObjectId
  link         Link       @relation(fields: [linkId], references: [id])
  linkId       String     @db.ObjectId
  collection   Collection @relation(fields: [collectionId], references: [id])
  collectionId String     @db.ObjectId
}

model DailyClicks {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId    String // Foreign key to User model
  clicks    Int      @default(0)
}

model User {
  id            String        @id @default(auto()) @map("_id") @db.ObjectId
  email         String        @unique
  emailVerified Boolean       @default(false)
  name          String?
  links         Link[] // One-to-Many relation with Link
  premium       Boolean       @default(false)
  role          Role          @default(USER)
  password      String?
  salt          String?
  DailyClicks   DailyClicks[]
  collections   Collection[] // One-to-Many relation with Collection
  createdAt     DateTime?     @default(now())
  provider      Provider?
}

model Traffic {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  link       Link     @relation(fields: [linkId], references: [id])
  linkId     String // Foreign key to Link model
  location   Json
  createdAt  DateTime @default(now())
  device     String?
  browser    String?
  source     String?
  sourceLink String?
}

enum Role {
  USER
  ADMIN
}

enum Provider {
  CREDENTIALS
  GITHUB
  GOOGLE
}
